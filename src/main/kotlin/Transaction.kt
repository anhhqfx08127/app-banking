import iterator.TransactionRecord
import strategy.FeeStrategy
import kotlin.math.abs

/**
 * üßæ Giao di·ªán Transaction ‚Äî ƒë·∫°i di·ªán cho m·ªôt h√†nh ƒë·ªông giao d·ªãch.
 * M·ªói l·ªõp c·ª• th·ªÉ (BasicTransaction, Decorator, v.v.) s·∫Ω c√†i ƒë·∫∑t ph∆∞∆°ng th·ª©c execute().
 */
interface Transaction {
    fun execute()
}

/**
 * üí∏ BasicTransaction ‚Äî giao d·ªãch c∆° b·∫£n (n·∫°p ho·∫∑c r√∫t ti·ªÅn).
 *
 * üëâ √Åp d·ª•ng c√°c m·∫´u thi·∫øt k·∫ø:
 * - Strategy: T√≠nh ph√≠ giao d·ªãch b·∫±ng FeeStrategy (PercentFee, FixedFee, NoFee)
 * - Iterator: Ghi l·ªãch s·ª≠ v√†o TransactionHistory c·ªßa t√†i kho·∫£n (ch·ªâ khi giao d·ªãch th√†nh c√¥ng)
 */
class BasicTransaction(
    private val account: BankAccount,     // T√†i kho·∫£n th·ª±c hi·ªán giao d·ªãch
    private val amount: Double,           // S·ªë ti·ªÅn giao d·ªãch (+ l√† n·∫°p, - l√† r√∫t)
    private val description: String,      // M√¥ t·∫£ giao d·ªãch
    private val feeStrategy: FeeStrategy  // Chi·∫øn l∆∞·ª£c t√≠nh ph√≠
) : Transaction {

    override fun execute() {
        val oldBalance = account.balance           // Ghi nh·ªõ s·ªë d∆∞ tr∆∞·ªõc giao d·ªãch
        val fee = feeStrategy.fee(amount)          // üí∞ T√≠nh ph√≠ giao d·ªãch

        // N·∫øu amount >= 0 ‚Üí n·∫°p ti·ªÅn, ng∆∞·ª£c l·∫°i ‚Üí r√∫t ti·ªÅn
        if (amount >= 0) {
            account.deposit(amount, fee, description)
        } else {
            account.withdraw(amount, fee, description)
        }

        // üßæ Ch·ªâ ghi l·ªãch s·ª≠ n·∫øu s·ªë d∆∞ thay ƒë·ªïi (giao d·ªãch th·ª±c s·ª± x·∫£y ra)
        if (account.balance != oldBalance) {
            account.history.add(
                TransactionRecord(
                    description = description,
                    amount = amount,
                    fee = abs(fee),
                    balanceAfter = account.balance
                )
            )
        } else {
            println("‚ö†Ô∏è Giao d·ªãch '${description}' kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán do tr·∫°ng th√°i t√†i kho·∫£n (${account.state.type}).")
        }
    }
}