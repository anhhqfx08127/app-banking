package iterator

/**
 * üíæ TransactionRecord: L∆∞u th√¥ng tin c·ªßa m·ªôt giao d·ªãch c·ª• th·ªÉ.
 *
 * @param description M√¥ t·∫£ giao d·ªãch (VD: "R√∫t ti·ªÅn ATM", "N·ªôp ti·ªÅn")
 * @param amount S·ªë ti·ªÅn giao d·ªãch (√¢m n·∫øu l√† r√∫t, d∆∞∆°ng n·∫øu l√† n·∫°p)
 * @param balanceAfter S·ªë d∆∞ sau khi giao d·ªãch ho√†n t·∫•t
 * @param timestamp Th·ªùi ƒëi·ªÉm th·ª±c hi·ªán giao d·ªãch (m·∫∑c ƒë·ªãnh l√† th·ªùi gian hi·ªán t·∫°i, t√≠nh theo milliseconds)
 */
data class TransactionRecord(
    val description: String,
    val amount: Double,
    val balanceAfter: Double,
    val timestamp: Long = System.currentTimeMillis()
)

/**
 * üìú TransactionHistory: L∆∞u danh s√°ch c√°c giao d·ªãch c·ªßa t√†i kho·∫£n.
 *
 * üëâ √Åp d·ª•ng **Iterator Pattern**
 * - `Iterable<TransactionRecord>` gi√∫p l·ªõp n√†y c√≥ th·ªÉ ƒë∆∞·ª£c duy·ªát b·∫±ng `for (record in history)`
 * - Che gi·∫•u c·∫•u tr√∫c l∆∞u tr·ªØ n·ªôi b·ªô (danh s√°ch `transactions`) kh·ªèi ng∆∞·ªùi d√πng b√™n ngo√†i.
 */
class TransactionHistory : Iterable<TransactionRecord> {
    // Danh s√°ch l∆∞u tr·ªØ c√°c giao d·ªãch
    private val transactions = mutableListOf<TransactionRecord>()

    /**
     * ‚ûï Th√™m m·ªôt b·∫£n ghi giao d·ªãch m·ªõi v√†o l·ªãch s·ª≠.
     */
    fun add(record: TransactionRecord) = transactions.add(record)

    /**
     * üîÅ Tr·∫£ v·ªÅ Iterator cho ph√©p duy·ªát qua c√°c TransactionRecord.
     * ‚Üí Gi√∫p c√≥ th·ªÉ d√πng: `for (tx in history)`
     */
    override fun iterator(): Iterator<TransactionRecord> = transactions.iterator()
}