import factory.Account
import observer.AccountObserver
import state.AccountState
import state.ActiveState

/**
 * L·ªõp BankAccount ƒë·∫°i di·ªán cho m·ªôt t√†i kho·∫£n ng√¢n h√†ng.
 *
 * üëâ √Åp d·ª•ng nhi·ªÅu m·∫´u thi·∫øt k·∫ø:
 * - Factory: t·∫°o ƒë·ªëi t∆∞·ª£ng Account th√¥ng qua AccountFactory
 * - Observer: th√¥ng b√°o khi s·ªë d∆∞ thay ƒë·ªïi
 * - State: thay ƒë·ªïi h√†nh vi t√πy theo tr·∫°ng th√°i t√†i kho·∫£n (Active, Frozen, Closed)
 */
class BankAccount(
    val account: Account,                // Th√¥ng tin c∆° b·∫£n v·ªÅ t√†i kho·∫£n (ƒë∆∞·ª£c t·∫°o b·ªüi AccountFactory)
    var balance: Double = 0.0,           // S·ªë d∆∞ hi·ªán t·∫°i
    var state: AccountState = ActiveState() // Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa t√†i kho·∫£n
) {
    // Danh s√°ch observer ƒëang theo d√µi t√†i kho·∫£n n√†y
    private val observers = mutableListOf<AccountObserver>()

    /**
     * ƒêƒÉng k√Ω m·ªôt observer ƒë·ªÉ nh·∫≠n th√¥ng b√°o khi s·ªë d∆∞ thay ƒë·ªïi.
     * (V√≠ d·ª•: NotificationService)
     */
    fun addObserver(observer: AccountObserver) = observers.add(observer)

    /**
     * H·ªßy ƒëƒÉng k√Ω observer.
     */
    fun removeObserver(observer: AccountObserver) = observers.remove(observer)

    /**
     * G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ observer khi c√≥ thay ƒë·ªïi s·ªë d∆∞.
     */
    fun notifyObservers() = observers.forEach { it.onBalanceChanged(account, balance) }

    /**
     * N·∫°p ti·ªÅn v√†o t√†i kho·∫£n.
     * H√†nh vi ph·ª• thu·ªôc v√†o tr·∫°ng th√°i hi·ªán t·∫°i (Active / Frozen / Closed).
     */
    fun deposit(amount: Double, description: String) {
        state.deposit(this, amount, description)
    }

    /**
     * R√∫t ti·ªÅn kh·ªèi t√†i kho·∫£n.
     * H√†nh vi c≈©ng ph·ª• thu·ªôc v√†o tr·∫°ng th√°i hi·ªán t·∫°i.
     */
    fun withdraw(amount: Double, description: String) {
        state.withdraw(this, amount, description)
    }

    /**
     * ƒê√≥ng bƒÉng t√†i kho·∫£n (chuy·ªÉn tr·∫°ng th√°i sang FrozenState).
     */
    fun freeze() = state.freeze(this)

    /**
     * ƒê√≥ng t√†i kho·∫£n (chuy·ªÉn tr·∫°ng th√°i sang ClosedState).
     */
    fun close() = state.close(this)
}