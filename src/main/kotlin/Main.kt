import decorator.LoggingDecorator
import decorator.NotificationDecorator
import decorator.TimeDecorator
import factory.AccountFactory
import factory.AccountType
import observer.NotificationService
import strategy.FixedFee
import strategy.NoFee
import strategy.PercentFee

// C√°c chi·∫øn l∆∞·ª£c t√≠nh ph√≠ (Strategy)
val percentFee = PercentFee(2.0)  // Ph√≠ 2% s·ªë ti·ªÅn
val fixedFee = FixedFee(3.0)      // Ph√≠ c·ªë ƒë·ªãnh 3
val noFee = NoFee()               // Kh√¥ng t√≠nh ph√≠

fun main() {
    // T·∫°o c√°c t√†i kho·∫£n
    val depositAccount = BankAccount(
        account = AccountFactory.create(
            accountType = AccountType.DEPOSIT,
            accountNumber = "98877797",
            accountName = "HOANG QUOC ANH"
        ),
        balance = 0.0
    )

    val salaryAccount = BankAccount(
        account = AccountFactory.create(
            accountType = AccountType.SALARY,
            accountNumber = "99998888",
            accountName = "HOANG QUOC ANH"
        ),
        balance = 0.0
    )

    println("----------")

    // Th√™m Observer ƒë·ªÉ theo d√µi bi·∫øn ƒë·ªông s·ªë d∆∞
    depositAccount.addObserver(NotificationService())
    salaryAccount.addObserver(NotificationService())

    // Giao d·ªãch N·∫†P TI·ªÄN
    val depositTx = BasicTransaction(
        account = depositAccount,
        amount = 1000.0,
        description = "N·ªôp ti·ªÅn m·∫∑t t·∫°i qu·∫ßy",
        feeStrategy = noFee
    )

    // Th√™m decorator
    val decoratedDepositTx = LoggingDecorator(
        TimeDecorator(
            NotificationDecorator(depositAccount, depositTx)
        )
    )

    decoratedDepositTx.execute()

    println("----------")

    // Giao d·ªãch NH·∫¨N L∆Ø∆†NG
    val salaryTx = BasicTransaction(
        account = salaryAccount,
        amount = 5000.0,
        description = "Thanh to√°n l∆∞∆°ng th√°ng 10/2025",
        feeStrategy = noFee
    )

    val decoratedSalaryTx = LoggingDecorator(
        TimeDecorator(
            NotificationDecorator(salaryAccount, salaryTx)
        )
    )

    decoratedSalaryTx.execute()

    println("----------")

    // Giao d·ªãch R√öT TI·ªÄN (c√≥ ph√≠ c·ªë ƒë·ªãnh)
    val withdrawTx = BasicTransaction(
        account = salaryAccount,
        amount = -500.0,
        description = "R√∫t ti·ªÅn t·∫°i ATM",
        feeStrategy = fixedFee
    )

    val decoratedWithdrawTx = LoggingDecorator(
        TimeDecorator(
            NotificationDecorator(salaryAccount, withdrawTx)
        )
    )

    decoratedWithdrawTx.execute()

    println("----------")

    // Giao d·ªãch MUA H√ÄNG (c√≥ ph√≠ ph·∫ßn trƒÉm)
    val purchaseTx = BasicTransaction(
        account = salaryAccount,
        amount = -1200.0,
        description = "Thanh to√°n ƒë∆°n h√†ng Shopee",
        feeStrategy = percentFee
    )

    val decoratedPurchaseTx = LoggingDecorator(
        TimeDecorator(
            NotificationDecorator(salaryAccount, purchaseTx)
        )
    )

    decoratedPurchaseTx.execute()

    println("----------")
    depositAccount.freeze()

    val withdrawTxFreeze = BasicTransaction(
        account = depositAccount,
        amount = -500.0,
        description = "R√∫t ti·ªÅn t·∫°i ATM",
        feeStrategy = fixedFee
    )
    val decoratedWithdrawTxFreeze = LoggingDecorator(
        TimeDecorator(
            NotificationDecorator(depositAccount, withdrawTxFreeze)
        )
    )

    decoratedWithdrawTxFreeze.execute()

    depositAccount.close()

    // Iterator: hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch c·ªßa c√°c t√†i kho·∫£n
    println("\nüìú L·ªãch s·ª≠ giao d·ªãch c·ªßa t√†i kho·∫£n ${depositAccount.account.accountNumber}:")
    for (rec in depositAccount.history) {
        println(" - ${rec.description}: s·ªë ti·ªÅn = ${rec.amount}, s·ªë d∆∞ sau giao d·ªãch = ${rec.balanceAfter}")
    }

    println("\nüìú L·ªãch s·ª≠ giao d·ªãch c·ªßa t√†i kho·∫£n ${salaryAccount.account.accountNumber}:")
    for (rec in salaryAccount.history) {
        println(" - ${rec.description}: s·ªë ti·ªÅn = ${rec.amount}, s·ªë d∆∞ sau giao d·ªãch = ${rec.balanceAfter}")
    }


}