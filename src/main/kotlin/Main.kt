import decorator.LoggingDecorator
import decorator.NotificationDecorator
import decorator.TimeDecorator
import decorator.builder.TransactionBuilder
import factory.AccountFactory
import factory.AccountType
import singletonobserver.NotificationService
import strategy.FixedFee
import strategy.NoFee
import strategy.PercentFee

// C√°c chi·∫øn l∆∞·ª£c t√≠nh ph√≠ (Strategy)
val percentFee = PercentFee(2.0)  // Ph√≠ 2% s·ªë ti·ªÅn
val fixedFee = FixedFee(3.0)      // Ph√≠ c·ªë ƒë·ªãnh 3
val noFee = NoFee()               // Kh√¥ng t√≠nh ph√≠

fun main() {
    // T·∫°o c√°c t√†i kho·∫£n
    val depositAccount = BankAccount(
        account = AccountFactory.create(
            accountType = AccountType.DEPOSIT,
            accountNumber = "98877797",
            accountName = "HOANG QUOC ANH"
        ),
        balance = 0.0
    )

    val salaryAccount = BankAccount(
        account = AccountFactory.create(
            accountType = AccountType.SALARY,
            accountNumber = "99998888",
            accountName = "HOANG QUOC ANH"
        ),
        balance = 0.0
    )

    println("----------")

    // Th√™m Observer ƒë·ªÉ theo d√µi bi·∫øn ƒë·ªông s·ªë d∆∞
    depositAccount.addObserver(NotificationService.instance)
    salaryAccount.addObserver(NotificationService.instance)

    // Giao d·ªãch N·∫†P TI·ªÄN
    val depositTx = TransactionBuilder()
        .setAccount(depositAccount)
        .setAmount(1000.0)
        .setDescription("N·ªôp ti·ªÅn m·∫∑t t·∫°i qu·∫ßy")
        .setFeeStrategy(noFee)
        .enableNotification()
        .enableTimestamp()
        .enableLog()
        .build()

    depositTx.execute()

    println("----------")

    // Giao d·ªãch NH·∫¨N L∆Ø∆†NG
    val salaryTx = TransactionBuilder()
        .setAccount(salaryAccount)
        .setAmount(5000.0)
        .setDescription("Thanh to√°n l∆∞∆°ng th√°ng 10/2025")
        .setFeeStrategy(noFee)
        .enableNotification()
        .enableTimestamp()
        .enableLog()
        .build()

    salaryTx.execute()

    println("----------")

    // Giao d·ªãch R√öT TI·ªÄN (c√≥ ph√≠ c·ªë ƒë·ªãnh)
    val withdrawTx = TransactionBuilder()
        .setAccount(salaryAccount)
        .setAmount(-500.0)
        .setDescription("R√∫t ti·ªÅn t·∫°i ATM")
        .setFeeStrategy(fixedFee)
        .enableNotification()
        .enableTimestamp()
        .enableLog()
        .build()

    withdrawTx.execute()

    println("----------")

    // Giao d·ªãch MUA H√ÄNG (c√≥ ph√≠ ph·∫ßn trƒÉm)
    val purchaseTx = TransactionBuilder()
        .setAccount(salaryAccount)
        .setAmount(-1200.0)
        .setDescription("Thanh to√°n ƒë∆°n h√†ng Shopee")
        .setFeeStrategy(percentFee)
        .enableNotification()
        .enableTimestamp()
        .enableLog()
        .build()

    purchaseTx.execute()

    println("----------")
    depositAccount.freeze()

    val withdrawTxFreeze = TransactionBuilder()
        .setAccount(depositAccount)
        .setAmount(-500.0)
        .setDescription("R√∫t ti·ªÅn khi t√†i kho·∫£n b·ªã ƒë√≥ng bƒÉng")
        .setFeeStrategy(fixedFee)
        .enableNotification()
        .enableTimestamp()
        .enableLog()
        .build()

    withdrawTxFreeze.execute()

    depositAccount.close()

    // Iterator: hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch c·ªßa c√°c t√†i kho·∫£n
    println("\nüìú L·ªãch s·ª≠ giao d·ªãch c·ªßa t√†i kho·∫£n ${depositAccount.account.accountNumber}:")
    for (rec in depositAccount.history) {
        println(" - ${rec.description}: s·ªë ti·ªÅn = ${rec.amount}, ph√≠ = ${rec.fee}, s·ªë d∆∞ sau giao d·ªãch = ${rec.balanceAfter}")
    }

    println("\nüìú L·ªãch s·ª≠ giao d·ªãch c·ªßa t√†i kho·∫£n ${salaryAccount.account.accountNumber}:")
    for (rec in salaryAccount.history) {
        println(" - ${rec.description}: s·ªë ti·ªÅn = ${rec.amount}, ph√≠ = ${rec.fee}, s·ªë d∆∞ sau giao d·ªãch = ${rec.balanceAfter}")
    }


}